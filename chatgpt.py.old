import os
import sys
import atlassian
import openai
from langchain.chains import ConversationalRetrievalChain, RetrievalQA
from langchain.chat_models import ChatOpenAI
from langchain.document_loaders import DirectoryLoader, TextLoader
from langchain.embeddings import OpenAIEmbeddings
from langchain.indexes import VectorstoreIndexCreator
from langchain.indexes.vectorstore import VectorStoreIndexWrapper
from langchain.llms import OpenAI
from langchain.vectorstores import Chroma
from langchain.document_loaders import ConfluenceLoader
from inspect import getfullargspec

import constants

def is_str(v):
    return hasattr(v, 'lower')

def load_confluenceSpace(confluence_url,confluence_space_key,confluence_username,confluence_apikey):
    if (is_str(confluence_url) and is_str(confluence_username) and is_str(confluence_space_key) and (confluence_apikey)):
        loader = ConfluenceLoader(url=confluence_url, username=confluence_username, api_key=confluence_apikey)
       # if documents.count() > 0:
        documents = loader.load(space_key=confluence_space_key, include_attachments=False)
        #else:
        #documents = documents.extend(loader.load(space_key=confluence_space_key, include_attachments=False))
        return documents    



os.environ["OPENAI_API_KEY"] = constants.OPENAPIKEY
os.environ["CONFLUENCE_API_KEY"] = constants.CONFLUENCEAPIKEY

# Enable to save to disk & reuse the model (for repeated queries on the same data)
PERSIST = False

query = None
if len(sys.argv) > 1:
    query = sys.argv[1]

if PERSIST and os.path.exists("persist"):
    print("Reusing index...\n")
    vectorstore = Chroma(persist_directory="persist",
                         embedding_function=OpenAIEmbeddings())
    index = VectorStoreIndexWrapper(vectorstore=vectorstore)
else:
    # loader = TextLoader("data/data.txt") # Use this line if you only need data.txt
    # loader = DirectoryLoader("data/")
    # loader = DirectoryLoader("/tmp/datascience/Documents/")
    confluenceurl = 'https://expedient-cloud.atlassian.net'
    username = 'josh.davis@expedient.com'
    apikey = os.environ["CONFLUENCE_API_KEY"] 
    space_key = "IKB"
    #loader = ConfluenceLoader(url=confluenceurl, username=username, api_key=apikey)
    #documents = loader.load(space_key="SA", include_attachments=False)
    #documents.extend(loader.load(space_key="IKB", include_attachments=False))
    #documents.extend(loader.load(space_key="OF", include_attachments=False))
    #documents.extend(loader.load(space_key="PS", include_attachments=False))


    documents = load_confluenceSpace( confluence_apikey=apikey, confluence_space_key=space_key, confluence_url=confluenceurl, confluence_username=username)



    if PERSIST:
       
        index = VectorstoreIndexCreator(
            #vectorstore_kwargs={"persist_directory": "persist"}).from_loaders([loader])
            vectorstore_kwargs={"persist_directory": "persist"}).from_documents(documents)
    else:
       
        index = VectorstoreIndexCreator().from_documents(documents)
        

chain = ConversationalRetrievalChain.from_llm(
    llm=ChatOpenAI(model="gpt-3.5-turbo"),
    retriever=index.vectorstore.as_retriever(search_kwargs={"k": 1}),
)

chat_history = []
while True:
    if not query:
        query = input("Prompt: ")
    if query in ['quit', 'q', 'exit']:
        sys.exit()
    result = chain({"question": query, "chat_history": chat_history})
    print(result['answer'])

    chat_history.append((query, result['answer']))
    query = None
